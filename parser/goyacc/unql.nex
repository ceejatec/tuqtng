/\"((\\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^\"])*\"/     { 
                    lval.s = yylex.Text()[1:len(yylex.Text())-1]
                    logDebugTokens("STRING - %s", lval.s);
                    return STRING 
                  }
/'((\\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^''])*'/     {
                    lval.s = yylex.Text()[1:len(yylex.Text())-1]
                    logDebugTokens("STRING - %s", lval.s);
                    return STRING
                  }
/\./              { logDebugTokens("DOT"); return DOT }
/\+/              { logDebugTokens("PLUS"); return PLUS }
/-/               { logDebugTokens("MINUS"); return MINUS }
/\*/              { logDebugTokens("MULT"); return MULT }
/\//              { logDebugTokens("DIV"); return DIV }
/%/               { logDebugTokens("MOD"); return MOD }
/[aA][nN][dD]/    { logDebugTokens("AND"); return AND }
/[oO][rR]/        { logDebugTokens("OR"); return OR }
/\=\=/            { logDebugTokens("EQ"); return EQ }
/\=/              { logDebugTokens("EQ"); return EQ }
/\!\=/            { logDebugTokens("NE"); return NE }
/\<\>/            { logDebugTokens("NE"); return NE }
/\</              { logDebugTokens("LT"); return LT }
/\<\=/            { logDebugTokens("LTE"); return LTE }
/\>/              { logDebugTokens("GT"); return GT }
/\>\=/            { logDebugTokens("GTE"); return GTE }
/[nN][oO][tT]/    { logDebugTokens("NOT"); return NOT }
/[lL][iI][kK][eE]/ { logDebugTokens("LIKE"); return LIKE }
/[iI][sS]/        { logDebugTokens("IS"); return IS }
/[mM][iI][sS][sS][iI][nN][gG]/
                  { logDebugTokens("MISSING"); return MISSING }
/[vV][aA][lL][uU][eE][dD]/
                  { logDebugTokens("VALUED"); return VALUED }
/[sS][eE][lL][eE][cC][tT]/
                  { logDebugTokens("SELECT"); return SELECT }
/[aA][sS]/        { logDebugTokens("AS"); return AS }
/[fF][rR][oO][mM]/
                  { logDebugTokens("FROM"); return FROM }
/[wW][hH][eE][rR][eE]/
                  { logDebugTokens("WHERE"); return WHERE }
/[oO][rR][dD][eE][rR]/
                  { logDebugTokens("ORDER"); return ORDER }
/[bB][yY]/        { logDebugTokens("BY"); return BY }
/[aA][sS][cC]/    { logDebugTokens("ASC"); return ASC }
/[dD][eE][sS][cC]/
                  { logDebugTokens("DESC"); return DESC }
/[lL][iI][mM][iI][tT]/
                  { logDebugTokens("LIMIT"); return LIMIT }
/[oO][fF][fF][sS][eE][tT]/
                  { logDebugTokens("OFFSET"); return OFFSET }
/[eE][xX][pP][lL][aA][iI][nN]/
                  {
                    logDebugTokens("EXPLAIN"); return EXPLAIN
                  }
/[dD][iI][sS][tT][iI][nN][cC][tT]/
                  {
                    logDebugTokens("DISTINCT"); return DISTINCT
                  }
/[uU][nN][iI][qQ][uU][eE]/
                  {
                    logDebugTokens("UNIQUE"); return UNIQUE
                  }
/[cC][aA][sS][eE]/
                  {
                    logDebugTokens("CASE"); return CASE
                  }
/[wW][hH][eE][nN]/
                  {
                    logDebugTokens("WHEN"); return WHEN
                  }
/[tT][hH][eE][nN]/
                  {
                    logDebugTokens("THEN"); return THEN
                  }
/[eE][lL][sS][eE]/
                  {
                    logDebugTokens("ELSE"); return ELSE
                  }
/[eE][nN][dD]/
                  {
                    logDebugTokens("END"); return END
                  }
/[aA][nN][yY]/    {
                    logDebugTokens("ANY"); return ANY
                  }
/[fF][iI][rR][sS][tT]/
                  {
                    logDebugTokens("FIRST"); return FIRST
                  }
/[aA][lL][lL]/    {
                    logDebugTokens("ALL"); return ALL
                  }
/[oO][vV][eE][rR]/{
                    logDebugTokens("OVER"); return OVER
                  }
/[gG][rR][oO][uU][pP]/
                  {
                    logDebugTokens("GROUP"); return GROUP
                  }
/[bB][yY]/        {
                    logDebugTokens("BY"); return BY
                  }
/[hH][aA][vV][iI][nN][gG]/
                  {
                    logDebugTokens("HAVING"); return HAVING
                  }
/[cC][rR][eE][aA][tT][eE]/
                  {
                    logDebugTokens("CREATE"); return CREATE
                  }
/[vV][iI][eE][wW]/
                  {
                    logDebugTokens("VIEW"); return VIEW
                  }
/[iI][nN][dD][eE][xX]/
                  {
                    logDebugTokens("INDEX"); return INDEX
                  }
/[oO][nN]/
                  {
                    logDebugTokens("ON"); return ON
                  }
/\|\|/            { logDebugTokens("CONCAT"); return CONCAT }
/\(/              { logDebugTokens("LPAREN"); return LPAREN }
/\)/              { logDebugTokens("RPAREN"); return RPAREN }
/\{/              { logDebugTokens("LBRACE"); return LBRACE }
/\}/              { logDebugTokens("RBRACE"); return RBRACE }
/\,/              { logDebugTokens("COMMA"); return COMMA }
/\:/              { logDebugTokens("COLON"); return COLON }
/\[/              { logDebugTokens("LBRACKET"); return LBRACKET }
/\]/              { logDebugTokens("RBRACKET"); return RBRACKET }
/[tT][rR][uU][eE]/ 
                  { logDebugTokens("TRUE"); return TRUE}
/[fF][aA][lL][sS][eE]/ 
                  { logDebugTokens("FALSE"); return FALSE}
/[nN][uU][lL][lL]/ 
                  { logDebugTokens("NULL"); return NULL}
/-?([0-9]|[1-9][0-9]*)(\.[0-9][0-9]*)([eE][+\-]?[0-9][0-9]*)?/
                  {
                  // there are 2 separate rules for NUMBER
                  // instead of 1 with two optional components
                  // to differntiate it from plan INT
                    lval.f,_ = strconv.ParseFloat(yylex.Text(), 64);
                    logDebugTokens("NUMBER - %f", lval.f);
                    return NUMBER 
                  }
/-?([0-9]|[1-9][0-9]*)(\.[0-9][0-9]*)?([eE][+\-]?[0-9][0-9]*)/
                  { 
                    lval.f,_ = strconv.ParseFloat(yylex.Text(), 64);
                    logDebugTokens("NUMBER - %f", lval.f);
                    return NUMBER 
                  }
/-?[0-9]|[1-9][0-9]*/
                  { 
                    lval.n,_ = strconv.Atoi(yylex.Text());
                    logDebugTokens("INT - %d", lval.n);
                    return INT 
                  }
/[ \t\n]+/        { logDebugTokens("WHITESPACE (count=%d)", len(yylex.Text())) /* eat up whitespace */ }
/[a-zA-Z_][a-zA-Z0-9\-_]*/     { 
                    lval.s = yylex.Text();
                    logDebugTokens("IDENTIFIER - %s", lval.s);
                    return IDENTIFIER 
                  }
/`((\\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^`])+`/
                  {
                    //this rule allows for a wider range of identifiers by escaping them
                    lval.s = yylex.Text()[1:len(yylex.Text())-1]
                    logDebugTokens("IDENTIFIER - %s", lval.s);
                    return IDENTIFIER 
                  }
//
package goyacc

import("log")
import("strconv")

func logDebugTokens(format string, v ...interface{}) {
    if DebugTokens {
        log.Printf("DEBUG TOKEN " + format, v...)
    }
}